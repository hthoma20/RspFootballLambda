#!/usr/bin/python3

if __name__ != '__main__':
    print("Must be run as main module")
    exit(1)

import argparse
import importlib
import os
import sys

from unittest import mock

for function in os.listdir('src/functions'):
    sys.path.append(f'src/functions/{function}')

for layer in os.listdir('src/layers'):
    sys.path.append(f'src/layers/{layer}')


parser = argparse.ArgumentParser(description='Invoke local versions of lambda functions')
parser.add_argument('--module', '-m', help='the module name of the lambda code')
parser.add_argument('--body', '-b', default='', help='body to pass to the lambda, as if in the body of a request')
parser.add_argument('--queryParams', '-q', default='{}', help='dict of query params to pass to the lambda')
parser.add_argument('--roll', required=False, nargs='+', help='provide values for any rolls in this invocation')

args = parser.parse_args()

if args.roll:
    import random
    index = -1
    def mock_roll(*_):
        global index
        index += 1
        return int(args.roll[index])
    random.randint = mock_roll 

lambda_module = importlib.import_module(args.module)
result = lambda_module.lambda_handler({
    'body': args.body,
    'queryStringParameters': args.queryParams}, None)
print(result)
